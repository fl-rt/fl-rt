import 'manual.dart';
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for the flutter engine
class FlutterEmbedderBindings {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterEmbedderBindings(ffi.DynamicLibrary dynamicLibrary)
      : _dylib = dynamicLibrary;

  late final ffi.Pointer<ffi.Int32> _kFlutterSemanticsNodeIdBatchEnd =
      _dylib.lookup<ffi.Int32>('kFlutterSemanticsNodeIdBatchEnd');

  int get kFlutterSemanticsNodeIdBatchEnd =>
      _kFlutterSemanticsNodeIdBatchEnd.value;

  set kFlutterSemanticsNodeIdBatchEnd(int value) =>
      _kFlutterSemanticsNodeIdBatchEnd.value = value;

  late final ffi.Pointer<ffi.Int32> _kFlutterSemanticsCustomActionIdBatchEnd =
      _dylib.lookup<ffi.Int32>('kFlutterSemanticsCustomActionIdBatchEnd');

  int get kFlutterSemanticsCustomActionIdBatchEnd =>
      _kFlutterSemanticsCustomActionIdBatchEnd.value;

  set kFlutterSemanticsCustomActionIdBatchEnd(int value) =>
      _kFlutterSemanticsCustomActionIdBatchEnd.value = value;

  int FlutterEngineCreateAOTData(
    ffi.Pointer<FlutterEngineAOTDataSource> source,
    ffi.Pointer<ffi.Pointer<FlutterEngineAOTData>> data_out,
  ) {
    return (_FlutterEngineCreateAOTData ??= _dylib.lookupFunction<
        _c_FlutterEngineCreateAOTData,
        _dart_FlutterEngineCreateAOTData>('FlutterEngineCreateAOTData'))(
      source,
      data_out,
    );
  }

  _dart_FlutterEngineCreateAOTData? _FlutterEngineCreateAOTData;

  int FlutterEngineCollectAOTData(
    ffi.Pointer<FlutterEngineAOTData> data,
  ) {
    return (_FlutterEngineCollectAOTData ??= _dylib.lookupFunction<
        _c_FlutterEngineCollectAOTData,
        _dart_FlutterEngineCollectAOTData>('FlutterEngineCollectAOTData'))(
      data,
    );
  }

  _dart_FlutterEngineCollectAOTData? _FlutterEngineCollectAOTData;

  int FlutterEngineRun(
    int version,
    ffi.Pointer<FlutterRendererConfig> config,
    ffi.Pointer<FlutterProjectArgs> args,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Pointer<FlutterEngine>> engine_out,
  ) {
    return (_FlutterEngineRun ??=
        _dylib.lookupFunction<_c_FlutterEngineRun, _dart_FlutterEngineRun>(
            'FlutterEngineRun'))(
      version,
      config,
      args,
      user_data,
      engine_out,
    );
  }

  _dart_FlutterEngineRun? _FlutterEngineRun;

  int FlutterEngineShutdown(
    ffi.Pointer<FlutterEngine> engine,
  ) {
    return (_FlutterEngineShutdown ??= _dylib.lookupFunction<
        _c_FlutterEngineShutdown,
        _dart_FlutterEngineShutdown>('FlutterEngineShutdown'))(
      engine,
    );
  }

  _dart_FlutterEngineShutdown? _FlutterEngineShutdown;

  int FlutterEngineInitialize(
    int version,
    ffi.Pointer<FlutterRendererConfig> config,
    ffi.Pointer<FlutterProjectArgs> args,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Pointer<FlutterEngine>> engine_out,
  ) {
    return (_FlutterEngineInitialize ??= _dylib.lookupFunction<
        _c_FlutterEngineInitialize,
        _dart_FlutterEngineInitialize>('FlutterEngineInitialize'))(
      version,
      config,
      args,
      user_data,
      engine_out,
    );
  }

  _dart_FlutterEngineInitialize? _FlutterEngineInitialize;

  int FlutterEngineDeinitialize(
    ffi.Pointer<FlutterEngine> engine,
  ) {
    return (_FlutterEngineDeinitialize ??= _dylib.lookupFunction<
        _c_FlutterEngineDeinitialize,
        _dart_FlutterEngineDeinitialize>('FlutterEngineDeinitialize'))(
      engine,
    );
  }

  _dart_FlutterEngineDeinitialize? _FlutterEngineDeinitialize;

  int FlutterEngineRunInitialized(
    ffi.Pointer<FlutterEngine> engine,
  ) {
    return (_FlutterEngineRunInitialized ??= _dylib.lookupFunction<
        _c_FlutterEngineRunInitialized,
        _dart_FlutterEngineRunInitialized>('FlutterEngineRunInitialized'))(
      engine,
    );
  }

  _dart_FlutterEngineRunInitialized? _FlutterEngineRunInitialized;

  int FlutterEngineSendWindowMetricsEvent(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<FlutterWindowMetricsEvent> event,
  ) {
    return (_FlutterEngineSendWindowMetricsEvent ??= _dylib.lookupFunction<
            _c_FlutterEngineSendWindowMetricsEvent,
            _dart_FlutterEngineSendWindowMetricsEvent>(
        'FlutterEngineSendWindowMetricsEvent'))(
      engine,
      event,
    );
  }

  _dart_FlutterEngineSendWindowMetricsEvent?
      _FlutterEngineSendWindowMetricsEvent;

  int FlutterEngineSendPointerEvent(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<FlutterPointerEvent> events,
    int events_count,
  ) {
    return (_FlutterEngineSendPointerEvent ??= _dylib.lookupFunction<
        _c_FlutterEngineSendPointerEvent,
        _dart_FlutterEngineSendPointerEvent>('FlutterEngineSendPointerEvent'))(
      engine,
      events,
      events_count,
    );
  }

  _dart_FlutterEngineSendPointerEvent? _FlutterEngineSendPointerEvent;

  int FlutterEngineSendKeyEvent(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<FlutterKeyEvent> event,
    ffi.Pointer<ffi.NativeFunction<FlutterKeyEventCallback>> callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return (_FlutterEngineSendKeyEvent ??= _dylib.lookupFunction<
        _c_FlutterEngineSendKeyEvent,
        _dart_FlutterEngineSendKeyEvent>('FlutterEngineSendKeyEvent'))(
      engine,
      event,
      callback,
      user_data,
    );
  }

  _dart_FlutterEngineSendKeyEvent? _FlutterEngineSendKeyEvent;

  int FlutterEngineSendPlatformMessage(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<FlutterPlatformMessage> message,
  ) {
    return (_FlutterEngineSendPlatformMessage ??= _dylib.lookupFunction<
            _c_FlutterEngineSendPlatformMessage,
            _dart_FlutterEngineSendPlatformMessage>(
        'FlutterEngineSendPlatformMessage'))(
      engine,
      message,
    );
  }

  _dart_FlutterEngineSendPlatformMessage? _FlutterEngineSendPlatformMessage;

  int FlutterPlatformMessageCreateResponseHandle(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<ffi.NativeFunction<FlutterDataCallback>> data_callback,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Pointer<FlutterPlatformMessageResponseHandle>> response_out,
  ) {
    return (_FlutterPlatformMessageCreateResponseHandle ??=
        _dylib.lookupFunction<_c_FlutterPlatformMessageCreateResponseHandle,
                _dart_FlutterPlatformMessageCreateResponseHandle>(
            'FlutterPlatformMessageCreateResponseHandle'))(
      engine,
      data_callback,
      user_data,
      response_out,
    );
  }

  _dart_FlutterPlatformMessageCreateResponseHandle?
      _FlutterPlatformMessageCreateResponseHandle;

  int FlutterPlatformMessageReleaseResponseHandle(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<FlutterPlatformMessageResponseHandle> response,
  ) {
    return (_FlutterPlatformMessageReleaseResponseHandle ??=
        _dylib.lookupFunction<_c_FlutterPlatformMessageReleaseResponseHandle,
                _dart_FlutterPlatformMessageReleaseResponseHandle>(
            'FlutterPlatformMessageReleaseResponseHandle'))(
      engine,
      response,
    );
  }

  _dart_FlutterPlatformMessageReleaseResponseHandle?
      _FlutterPlatformMessageReleaseResponseHandle;

  int FlutterEngineSendPlatformMessageResponse(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<FlutterPlatformMessageResponseHandle> handle,
    ffi.Pointer<ffi.Uint8> data,
    int data_length,
  ) {
    return (_FlutterEngineSendPlatformMessageResponse ??= _dylib.lookupFunction<
            _c_FlutterEngineSendPlatformMessageResponse,
            _dart_FlutterEngineSendPlatformMessageResponse>(
        'FlutterEngineSendPlatformMessageResponse'))(
      engine,
      handle,
      data,
      data_length,
    );
  }

  _dart_FlutterEngineSendPlatformMessageResponse?
      _FlutterEngineSendPlatformMessageResponse;

  int __FlutterEngineFlushPendingTasksNow() {
    return (___FlutterEngineFlushPendingTasksNow ??= _dylib.lookupFunction<
            _c___FlutterEngineFlushPendingTasksNow,
            _dart___FlutterEngineFlushPendingTasksNow>(
        '__FlutterEngineFlushPendingTasksNow'))();
  }

  _dart___FlutterEngineFlushPendingTasksNow?
      ___FlutterEngineFlushPendingTasksNow;

  int FlutterEngineRegisterExternalTexture(
    ffi.Pointer<FlutterEngine> engine,
    int texture_identifier,
  ) {
    return (_FlutterEngineRegisterExternalTexture ??= _dylib.lookupFunction<
            _c_FlutterEngineRegisterExternalTexture,
            _dart_FlutterEngineRegisterExternalTexture>(
        'FlutterEngineRegisterExternalTexture'))(
      engine,
      texture_identifier,
    );
  }

  _dart_FlutterEngineRegisterExternalTexture?
      _FlutterEngineRegisterExternalTexture;

  int FlutterEngineUnregisterExternalTexture(
    ffi.Pointer<FlutterEngine> engine,
    int texture_identifier,
  ) {
    return (_FlutterEngineUnregisterExternalTexture ??= _dylib.lookupFunction<
            _c_FlutterEngineUnregisterExternalTexture,
            _dart_FlutterEngineUnregisterExternalTexture>(
        'FlutterEngineUnregisterExternalTexture'))(
      engine,
      texture_identifier,
    );
  }

  _dart_FlutterEngineUnregisterExternalTexture?
      _FlutterEngineUnregisterExternalTexture;

  int FlutterEngineMarkExternalTextureFrameAvailable(
    ffi.Pointer<FlutterEngine> engine,
    int texture_identifier,
  ) {
    return (_FlutterEngineMarkExternalTextureFrameAvailable ??=
        _dylib.lookupFunction<_c_FlutterEngineMarkExternalTextureFrameAvailable,
                _dart_FlutterEngineMarkExternalTextureFrameAvailable>(
            'FlutterEngineMarkExternalTextureFrameAvailable'))(
      engine,
      texture_identifier,
    );
  }

  _dart_FlutterEngineMarkExternalTextureFrameAvailable?
      _FlutterEngineMarkExternalTextureFrameAvailable;

  int FlutterEngineUpdateSemanticsEnabled(
    ffi.Pointer<FlutterEngine> engine,
    bool enabled,
  ) {
    return (_FlutterEngineUpdateSemanticsEnabled ??= _dylib.lookupFunction<
            _c_FlutterEngineUpdateSemanticsEnabled,
            _dart_FlutterEngineUpdateSemanticsEnabled>(
        'FlutterEngineUpdateSemanticsEnabled'))(
      engine,
      enabled ? 1 : 0,
    );
  }

  _dart_FlutterEngineUpdateSemanticsEnabled?
      _FlutterEngineUpdateSemanticsEnabled;

  int FlutterEngineUpdateAccessibilityFeatures(
    ffi.Pointer<FlutterEngine> engine,
    int features,
  ) {
    return (_FlutterEngineUpdateAccessibilityFeatures ??= _dylib.lookupFunction<
            _c_FlutterEngineUpdateAccessibilityFeatures,
            _dart_FlutterEngineUpdateAccessibilityFeatures>(
        'FlutterEngineUpdateAccessibilityFeatures'))(
      engine,
      features,
    );
  }

  _dart_FlutterEngineUpdateAccessibilityFeatures?
      _FlutterEngineUpdateAccessibilityFeatures;

  int FlutterEngineDispatchSemanticsAction(
    ffi.Pointer<FlutterEngine> engine,
    int id,
    int action,
    ffi.Pointer<ffi.Uint8> data,
    int data_length,
  ) {
    return (_FlutterEngineDispatchSemanticsAction ??= _dylib.lookupFunction<
            _c_FlutterEngineDispatchSemanticsAction,
            _dart_FlutterEngineDispatchSemanticsAction>(
        'FlutterEngineDispatchSemanticsAction'))(
      engine,
      id,
      action,
      data,
      data_length,
    );
  }

  _dart_FlutterEngineDispatchSemanticsAction?
      _FlutterEngineDispatchSemanticsAction;

  int FlutterEngineOnVsync(
    ffi.Pointer<FlutterEngine> engine,
    int baton,
    int frame_start_time_nanos,
    int frame_target_time_nanos,
  ) {
    return (_FlutterEngineOnVsync ??= _dylib.lookupFunction<
        _c_FlutterEngineOnVsync,
        _dart_FlutterEngineOnVsync>('FlutterEngineOnVsync'))(
      engine,
      baton,
      frame_start_time_nanos,
      frame_target_time_nanos,
    );
  }

  _dart_FlutterEngineOnVsync? _FlutterEngineOnVsync;

  int FlutterEngineReloadSystemFonts(
    ffi.Pointer<FlutterEngine> engine,
  ) {
    return (_FlutterEngineReloadSystemFonts ??= _dylib.lookupFunction<
            _c_FlutterEngineReloadSystemFonts,
            _dart_FlutterEngineReloadSystemFonts>(
        'FlutterEngineReloadSystemFonts'))(
      engine,
    );
  }

  _dart_FlutterEngineReloadSystemFonts? _FlutterEngineReloadSystemFonts;

  void FlutterEngineTraceEventDurationBegin(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_FlutterEngineTraceEventDurationBegin ??= _dylib.lookupFunction<
            _c_FlutterEngineTraceEventDurationBegin,
            _dart_FlutterEngineTraceEventDurationBegin>(
        'FlutterEngineTraceEventDurationBegin'))(
      name,
    );
  }

  _dart_FlutterEngineTraceEventDurationBegin?
      _FlutterEngineTraceEventDurationBegin;

  void FlutterEngineTraceEventDurationEnd(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_FlutterEngineTraceEventDurationEnd ??= _dylib.lookupFunction<
            _c_FlutterEngineTraceEventDurationEnd,
            _dart_FlutterEngineTraceEventDurationEnd>(
        'FlutterEngineTraceEventDurationEnd'))(
      name,
    );
  }

  _dart_FlutterEngineTraceEventDurationEnd? _FlutterEngineTraceEventDurationEnd;

  void FlutterEngineTraceEventInstant(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_FlutterEngineTraceEventInstant ??= _dylib.lookupFunction<
            _c_FlutterEngineTraceEventInstant,
            _dart_FlutterEngineTraceEventInstant>(
        'FlutterEngineTraceEventInstant'))(
      name,
    );
  }

  _dart_FlutterEngineTraceEventInstant? _FlutterEngineTraceEventInstant;

  int FlutterEnginePostRenderThreadTask(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<ffi.NativeFunction<VoidCallback>> callback,
    ffi.Pointer<ffi.Void> callback_data,
  ) {
    return (_FlutterEnginePostRenderThreadTask ??= _dylib.lookupFunction<
            _c_FlutterEnginePostRenderThreadTask,
            _dart_FlutterEnginePostRenderThreadTask>(
        'FlutterEnginePostRenderThreadTask'))(
      engine,
      callback,
      callback_data,
    );
  }

  _dart_FlutterEnginePostRenderThreadTask? _FlutterEnginePostRenderThreadTask;

  int FlutterEngineGetCurrentTime() {
    return (_FlutterEngineGetCurrentTime ??= _dylib.lookupFunction<
        _c_FlutterEngineGetCurrentTime,
        _dart_FlutterEngineGetCurrentTime>('FlutterEngineGetCurrentTime'))();
  }

  _dart_FlutterEngineGetCurrentTime? _FlutterEngineGetCurrentTime;

  int FlutterEngineRunTask(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<FlutterTask> task,
  ) {
    return (_FlutterEngineRunTask ??= _dylib.lookupFunction<
        _c_FlutterEngineRunTask,
        _dart_FlutterEngineRunTask>('FlutterEngineRunTask'))(
      engine,
      task,
    );
  }

  _dart_FlutterEngineRunTask? _FlutterEngineRunTask;

  int FlutterEngineUpdateLocales(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<ffi.Pointer<FlutterLocale>> locales,
    int locales_count,
  ) {
    return (_FlutterEngineUpdateLocales ??= _dylib.lookupFunction<
        _c_FlutterEngineUpdateLocales,
        _dart_FlutterEngineUpdateLocales>('FlutterEngineUpdateLocales'))(
      engine,
      locales,
      locales_count,
    );
  }

  _dart_FlutterEngineUpdateLocales? _FlutterEngineUpdateLocales;

  bool FlutterEngineRunsAOTCompiledDartCode() {
    return (_FlutterEngineRunsAOTCompiledDartCode ??= _dylib.lookupFunction<
                _c_FlutterEngineRunsAOTCompiledDartCode,
                _dart_FlutterEngineRunsAOTCompiledDartCode>(
            'FlutterEngineRunsAOTCompiledDartCode'))() !=
        0;
  }

  _dart_FlutterEngineRunsAOTCompiledDartCode?
      _FlutterEngineRunsAOTCompiledDartCode;

  int FlutterEnginePostDartObject(
    ffi.Pointer<FlutterEngine> engine,
    int port,
    ffi.Pointer<FlutterEngineDartObject> object,
  ) {
    return (_FlutterEnginePostDartObject ??= _dylib.lookupFunction<
        _c_FlutterEnginePostDartObject,
        _dart_FlutterEnginePostDartObject>('FlutterEnginePostDartObject'))(
      engine,
      port,
      object,
    );
  }

  _dart_FlutterEnginePostDartObject? _FlutterEnginePostDartObject;

  int FlutterEngineNotifyLowMemoryWarning(
    ffi.Pointer<FlutterEngine> engine,
  ) {
    return (_FlutterEngineNotifyLowMemoryWarning ??= _dylib.lookupFunction<
            _c_FlutterEngineNotifyLowMemoryWarning,
            _dart_FlutterEngineNotifyLowMemoryWarning>(
        'FlutterEngineNotifyLowMemoryWarning'))(
      engine,
    );
  }

  _dart_FlutterEngineNotifyLowMemoryWarning?
      _FlutterEngineNotifyLowMemoryWarning;

  int FlutterEnginePostCallbackOnAllNativeThreads(
    ffi.Pointer<FlutterEngine> engine,
    ffi.Pointer<ffi.NativeFunction<FlutterNativeThreadCallback>> callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return (_FlutterEnginePostCallbackOnAllNativeThreads ??=
        _dylib.lookupFunction<_c_FlutterEnginePostCallbackOnAllNativeThreads,
                _dart_FlutterEnginePostCallbackOnAllNativeThreads>(
            'FlutterEnginePostCallbackOnAllNativeThreads'))(
      engine,
      callback,
      user_data,
    );
  }

  _dart_FlutterEnginePostCallbackOnAllNativeThreads?
      _FlutterEnginePostCallbackOnAllNativeThreads;

  int FlutterEngineNotifyDisplayUpdate(
    ffi.Pointer<FlutterEngine> engine,
    int update_type,
    ffi.Pointer<FlutterEngineDisplay> displays,
    int display_count,
  ) {
    return (_FlutterEngineNotifyDisplayUpdate ??= _dylib.lookupFunction<
            _c_FlutterEngineNotifyDisplayUpdate,
            _dart_FlutterEngineNotifyDisplayUpdate>(
        'FlutterEngineNotifyDisplayUpdate'))(
      engine,
      update_type,
      displays,
      display_count,
    );
  }

  _dart_FlutterEngineNotifyDisplayUpdate? _FlutterEngineNotifyDisplayUpdate;

  int FlutterEngineGetProcAddresses(
    ffi.Pointer<FlutterEngineProcTable> table,
  ) {
    return (_FlutterEngineGetProcAddresses ??= _dylib.lookupFunction<
        _c_FlutterEngineGetProcAddresses,
        _dart_FlutterEngineGetProcAddresses>('FlutterEngineGetProcAddresses'))(
      table,
    );
  }

  _dart_FlutterEngineGetProcAddresses? _FlutterEngineGetProcAddresses;
}

class max_align_t extends ffi.Opaque {}

class fsid_t extends ffi.Struct {
  @ffi.Int32()
  external int _unique___val_item_0;
  @ffi.Int32()
  external int _unique___val_item_1;

  /// Helper for array `__val`.
  ArrayHelper_fsid_t___val_level0 get __val =>
      ArrayHelper_fsid_t___val_level0(this, [2], 0, 0);
}

/// Helper for array `__val` in struct `fsid_t`.
class ArrayHelper_fsid_t___val_level0 {
  final fsid_t _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_fsid_t___val_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique___val_item_0;
      case 1:
        return _struct._unique___val_item_1;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique___val_item_0 = value;
        break;
      case 1:
        _struct._unique___val_item_1 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

abstract class FlutterEngineResult {
  static const int kSuccess = 0;
  static const int kInvalidLibraryVersion = 1;
  static const int kInvalidArguments = 2;
  static const int kInternalInconsistency = 3;
}

abstract class FlutterRendererType {
  static const int kOpenGL = 0;
  static const int kSoftware = 1;
  static const int kMetal = 2;
}

abstract class FlutterAccessibilityFeature {
  static const int kFlutterAccessibilityFeatureAccessibleNavigation = 1;
  static const int kFlutterAccessibilityFeatureInvertColors = 2;
  static const int kFlutterAccessibilityFeatureDisableAnimations = 4;
  static const int kFlutterAccessibilityFeatureBoldText = 8;
  static const int kFlutterAccessibilityFeatureReduceMotion = 16;
}

abstract class FlutterSemanticsAction {
  static const int kFlutterSemanticsActionTap = 1;
  static const int kFlutterSemanticsActionLongPress = 2;
  static const int kFlutterSemanticsActionScrollLeft = 4;
  static const int kFlutterSemanticsActionScrollRight = 8;
  static const int kFlutterSemanticsActionScrollUp = 16;
  static const int kFlutterSemanticsActionScrollDown = 32;
  static const int kFlutterSemanticsActionIncrease = 64;
  static const int kFlutterSemanticsActionDecrease = 128;
  static const int kFlutterSemanticsActionShowOnScreen = 256;
  static const int kFlutterSemanticsActionMoveCursorForwardByCharacter = 512;
  static const int kFlutterSemanticsActionMoveCursorBackwardByCharacter = 1024;
  static const int kFlutterSemanticsActionSetSelection = 2048;
  static const int kFlutterSemanticsActionCopy = 4096;
  static const int kFlutterSemanticsActionCut = 8192;
  static const int kFlutterSemanticsActionPaste = 16384;
  static const int kFlutterSemanticsActionDidGainAccessibilityFocus = 32768;
  static const int kFlutterSemanticsActionDidLoseAccessibilityFocus = 65536;
  static const int kFlutterSemanticsActionCustomAction = 131072;
  static const int kFlutterSemanticsActionDismiss = 262144;
  static const int kFlutterSemanticsActionMoveCursorForwardByWord = 524288;
  static const int kFlutterSemanticsActionMoveCursorBackwardByWord = 1048576;
}

abstract class FlutterSemanticsFlag {
  static const int kFlutterSemanticsFlagHasCheckedState = 1;
  static const int kFlutterSemanticsFlagIsChecked = 2;
  static const int kFlutterSemanticsFlagIsSelected = 4;
  static const int kFlutterSemanticsFlagIsButton = 8;
  static const int kFlutterSemanticsFlagIsTextField = 16;
  static const int kFlutterSemanticsFlagIsFocused = 32;
  static const int kFlutterSemanticsFlagHasEnabledState = 64;
  static const int kFlutterSemanticsFlagIsEnabled = 128;
  static const int kFlutterSemanticsFlagIsInMutuallyExclusiveGroup = 256;
  static const int kFlutterSemanticsFlagIsHeader = 512;
  static const int kFlutterSemanticsFlagIsObscured = 1024;
  static const int kFlutterSemanticsFlagScopesRoute = 2048;
  static const int kFlutterSemanticsFlagNamesRoute = 4096;
  static const int kFlutterSemanticsFlagIsHidden = 8192;
  static const int kFlutterSemanticsFlagIsImage = 16384;
  static const int kFlutterSemanticsFlagIsLiveRegion = 32768;
  static const int kFlutterSemanticsFlagHasToggledState = 65536;
  static const int kFlutterSemanticsFlagIsToggled = 131072;
  static const int kFlutterSemanticsFlagHasImplicitScrolling = 262144;
  static const int kFlutterSemanticsFlagIsReadOnly = 1048576;
  static const int kFlutterSemanticsFlagIsFocusable = 2097152;
  static const int kFlutterSemanticsFlagIsLink = 4194304;
}

abstract class FlutterTextDirection {
  static const int kFlutterTextDirectionUnknown = 0;
  static const int kFlutterTextDirectionRTL = 1;
  static const int kFlutterTextDirectionLTR = 2;
}

class FlutterEngine extends ffi.Opaque {}

class FlutterTransformation extends ffi.Struct {
  @ffi.Double()
  external double scaleX;

  @ffi.Double()
  external double skewX;

  @ffi.Double()
  external double transX;

  @ffi.Double()
  external double skewY;

  @ffi.Double()
  external double scaleY;

  @ffi.Double()
  external double transY;

  @ffi.Double()
  external double pers0;

  @ffi.Double()
  external double pers1;

  @ffi.Double()
  external double pers2;
}

abstract class FlutterOpenGLTargetType {
  static const int kFlutterOpenGLTargetTypeTexture = 0;
  static const int kFlutterOpenGLTargetTypeFramebuffer = 1;
}

class FlutterOpenGLTexture extends ffi.Struct {
  @ffi.Uint32()
  external int target;

  @ffi.Uint32()
  external int name;

  @ffi.Uint32()
  external int format;

  external ffi.Pointer<ffi.Void> user_data;

  external ffi.Pointer<ffi.NativeFunction<VoidCallback>> destruction_callback;

  @ffi.Uint64()
  external int width;

  @ffi.Uint64()
  external int height;
}

class FlutterOpenGLFramebuffer extends ffi.Struct {
  @ffi.Uint32()
  external int target;

  @ffi.Uint32()
  external int name;

  external ffi.Pointer<ffi.Void> user_data;

  external ffi.Pointer<ffi.NativeFunction<VoidCallback>> destruction_callback;
}

class FlutterSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

class FlutterUIntSize extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;
}

class FlutterRect extends ffi.Struct {
  @ffi.Double()
  external double left;

  @ffi.Double()
  external double top;

  @ffi.Double()
  external double right;

  @ffi.Double()
  external double bottom;
}

class FlutterPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class FlutterRoundedRect extends ffi.Struct {
  external FlutterRect rect;

  external FlutterSize upper_left_corner_radius;

  external FlutterSize upper_right_corner_radius;

  external FlutterSize lower_right_corner_radius;

  external FlutterSize lower_left_corner_radius;
}

class FlutterFrameInfo extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external FlutterUIntSize size;
}

class FlutterPresentInfo extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  @ffi.Uint32()
  external int fbo_id;
}

class FlutterOpenGLRendererConfig extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.NativeFunction<BoolCallback>> make_current;

  external ffi.Pointer<ffi.NativeFunction<BoolCallback>> clear_current;

  external ffi.Pointer<ffi.NativeFunction<BoolCallback>> present;

  external ffi.Pointer<ffi.NativeFunction<UIntCallback>> fbo_callback;

  external ffi.Pointer<ffi.NativeFunction<BoolCallback>> make_resource_current;

  @ffi.Uint8()
  external int fbo_reset_after_present;

  external ffi.Pointer<ffi.NativeFunction<TransformationCallback>>
      surface_transformation;

  external ffi.Pointer<ffi.NativeFunction<ProcResolver>> gl_proc_resolver;

  external ffi.Pointer<ffi.NativeFunction<TextureFrameCallback>>
      gl_external_texture_frame_callback;

  external ffi.Pointer<ffi.NativeFunction<UIntFrameInfoCallback>>
      fbo_with_frame_info_callback;

  external ffi.Pointer<ffi.NativeFunction<BoolPresentInfoCallback>>
      present_with_info;
}

class FlutterMetalTexture extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  @ffi.Int64()
  external int texture_id;

  external ffi.Pointer<ffi.Void> texture;
}

class FlutterMetalRendererConfig extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.Void> device;

  external ffi.Pointer<ffi.Void> present_command_queue;

  external ffi.Pointer<ffi.NativeFunction<FlutterMetalTextureCallback>>
      get_next_drawable_callback;

  external ffi.Pointer<ffi.NativeFunction<FlutterMetalPresentCallback>>
      present_drawable_callback;
}

class FlutterSoftwareRendererConfig extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.NativeFunction<SoftwareSurfacePresentCallback>>
      surface_present_callback;
}

class _FlutterRendererConfig extends ffi.Struct {
  @ffi.Int32()
  external int type;
}

class FlutterWindowMetricsEvent extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  @ffi.Uint64()
  external int width;

  @ffi.Uint64()
  external int height;

  @ffi.Double()
  external double pixel_ratio;

  @ffi.Uint64()
  external int left;

  @ffi.Uint64()
  external int top;
}

abstract class FlutterPointerPhase {
  static const int kCancel = 0;
  static const int kUp = 1;
  static const int kDown = 2;
  static const int kMove = 3;
  static const int kAdd = 4;
  static const int kRemove = 5;
  static const int kHover = 6;
}

abstract class FlutterPointerDeviceKind {
  static const int kFlutterPointerDeviceKindMouse = 1;
  static const int kFlutterPointerDeviceKindTouch = 2;
}

abstract class FlutterPointerMouseButtons {
  static const int kFlutterPointerButtonMousePrimary = 1;
  static const int kFlutterPointerButtonMouseSecondary = 2;
  static const int kFlutterPointerButtonMouseMiddle = 4;
  static const int kFlutterPointerButtonMouseBack = 8;
  static const int kFlutterPointerButtonMouseForward = 16;
}

abstract class FlutterPointerSignalKind {
  static const int kFlutterPointerSignalKindNone = 0;
  static const int kFlutterPointerSignalKindScroll = 1;
}

class FlutterPointerEvent extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  @ffi.Int32()
  external int phase;

  @ffi.Uint64()
  external int timestamp;

  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Int32()
  external int device;

  @ffi.Int32()
  external int signal_kind;

  @ffi.Double()
  external double scroll_delta_x;

  @ffi.Double()
  external double scroll_delta_y;

  @ffi.Int32()
  external int device_kind;

  @ffi.Int64()
  external int buttons;
}

abstract class FlutterKeyEventType {
  static const int kFlutterKeyEventTypeUp = 1;
  static const int kFlutterKeyEventTypeDown = 2;
  static const int kFlutterKeyEventTypeRepeat = 3;
}

class FlutterKeyEvent extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  @ffi.Double()
  external double timestamp;

  @ffi.Int32()
  external int type;

  @ffi.Uint64()
  external int physical;

  @ffi.Uint64()
  external int logical;

  external ffi.Pointer<ffi.Int8> character;

  @ffi.Uint8()
  external int synthesized;
}

class FlutterPlatformMessageResponseHandle extends ffi.Opaque {}

class FlutterPlatformMessage extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.Int8> channel;

  external ffi.Pointer<ffi.Uint8> message;

  @ffi.Uint64()
  external int message_size;

  external ffi.Pointer<FlutterPlatformMessageResponseHandle> response_handle;
}

class FlutterSemanticsNode extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  @ffi.Int32()
  external int id;

  @ffi.Int32()
  external int flags;

  @ffi.Int32()
  external int actions;

  @ffi.Int32()
  external int text_selection_base;

  @ffi.Int32()
  external int text_selection_extent;

  @ffi.Int32()
  external int scroll_child_count;

  @ffi.Int32()
  external int scroll_index;

  @ffi.Double()
  external double scroll_position;

  @ffi.Double()
  external double scroll_extent_max;

  @ffi.Double()
  external double scroll_extent_min;

  @ffi.Double()
  external double elevation;

  @ffi.Double()
  external double thickness;

  external ffi.Pointer<ffi.Int8> label;

  external ffi.Pointer<ffi.Int8> hint;

  external ffi.Pointer<ffi.Int8> value;

  external ffi.Pointer<ffi.Int8> increased_value;

  external ffi.Pointer<ffi.Int8> decreased_value;

  @ffi.Int32()
  external int text_direction;

  external FlutterRect rect;

  external FlutterTransformation transform;

  @ffi.Uint64()
  external int child_count;

  external ffi.Pointer<ffi.Int32> children_in_traversal_order;

  external ffi.Pointer<ffi.Int32> children_in_hit_test_order;

  @ffi.Uint64()
  external int custom_accessibility_actions_count;

  external ffi.Pointer<ffi.Int32> custom_accessibility_actions;

  @ffi.Int64()
  external int platform_view_id;
}

class FlutterSemanticsCustomAction extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  @ffi.Int32()
  external int id;

  @ffi.Int32()
  external int override_action;

  external ffi.Pointer<ffi.Int8> label;

  external ffi.Pointer<ffi.Int8> hint;
}

class FlutterTaskRunner extends ffi.Opaque {}

class FlutterTask extends ffi.Struct {
  external ffi.Pointer<FlutterTaskRunner> runner;

  @ffi.Uint64()
  external int task;
}

class FlutterTaskRunnerDescription extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.Void> user_data;

  external ffi.Pointer<ffi.NativeFunction<BoolCallback>>
      runs_task_on_current_thread_callback;

  external ffi.Pointer<ffi.NativeFunction<FlutterTaskRunnerPostTaskCallback>>
      post_task_callback;

  @ffi.Uint64()
  external int identifier;
}

class FlutterCustomTaskRunners extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<FlutterTaskRunnerDescription> platform_task_runner;

  external ffi.Pointer<FlutterTaskRunnerDescription> render_task_runner;
}

class FlutterOpenGLBackingStore extends ffi.Struct {
  @ffi.Int32()
  external int type;
}

class FlutterSoftwareBackingStore extends ffi.Struct {
  external ffi.Pointer<ffi.Void> allocation;

  @ffi.Uint64()
  external int row_bytes;

  @ffi.Uint64()
  external int height;

  external ffi.Pointer<ffi.Void> user_data;

  external ffi.Pointer<ffi.NativeFunction<VoidCallback>> destruction_callback;
}

abstract class FlutterPlatformViewMutationType {
  static const int kFlutterPlatformViewMutationTypeOpacity = 0;
  static const int kFlutterPlatformViewMutationTypeClipRect = 1;
  static const int kFlutterPlatformViewMutationTypeClipRoundedRect = 2;
  static const int kFlutterPlatformViewMutationTypeTransformation = 3;
}

class FlutterPlatformViewMutation extends ffi.Struct {
  @ffi.Int32()
  external int type;
}

class FlutterPlatformView extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  @ffi.Int64()
  external int identifier;

  @ffi.Uint64()
  external int mutations_count;

  external ffi.Pointer<ffi.Pointer<FlutterPlatformViewMutation>> mutations;
}

abstract class FlutterBackingStoreType {
  static const int kFlutterBackingStoreTypeOpenGL = 0;
  static const int kFlutterBackingStoreTypeSoftware = 1;
}

class FlutterBackingStore extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.Void> user_data;

  @ffi.Int32()
  external int type;

  @ffi.Uint8()
  external int did_update;
}

class FlutterBackingStoreConfig extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external FlutterSize size;
}

abstract class FlutterLayerContentType {
  static const int kFlutterLayerContentTypeBackingStore = 0;
  static const int kFlutterLayerContentTypePlatformView = 1;
}

class FlutterLayer extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  @ffi.Int32()
  external int type;

  external FlutterPoint offset;

  external FlutterSize size;
}

class FlutterCompositor extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.Void> user_data;

  external ffi.Pointer<ffi.NativeFunction<FlutterBackingStoreCreateCallback>>
      create_backing_store_callback;

  external ffi.Pointer<ffi.NativeFunction<FlutterBackingStoreCollectCallback>>
      collect_backing_store_callback;

  external ffi.Pointer<ffi.NativeFunction<FlutterLayersPresentCallback>>
      present_layers_callback;

  @ffi.Uint8()
  external int avoid_backing_store_cache;
}

class FlutterLocale extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.Int8> language_code;

  external ffi.Pointer<ffi.Int8> country_code;

  external ffi.Pointer<ffi.Int8> script_code;

  external ffi.Pointer<ffi.Int8> variant_code;
}

class FlutterEngineDisplay extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  @ffi.Uint64()
  external int display_id;

  @ffi.Uint8()
  external int single_display;

  @ffi.Double()
  external double refresh_rate;
}

abstract class FlutterEngineDisplaysUpdateType {
  static const int kFlutterEngineDisplaysUpdateTypeStartup = 0;
  static const int kFlutterEngineDisplaysUpdateTypeCount = 1;
}

abstract class FlutterEngineDartObjectType {
  static const int kFlutterEngineDartObjectTypeNull = 0;
  static const int kFlutterEngineDartObjectTypeBool = 1;
  static const int kFlutterEngineDartObjectTypeInt32 = 2;
  static const int kFlutterEngineDartObjectTypeInt64 = 3;
  static const int kFlutterEngineDartObjectTypeDouble = 4;
  static const int kFlutterEngineDartObjectTypeString = 5;
  static const int kFlutterEngineDartObjectTypeBuffer = 6;
}

class FlutterEngineDartBuffer extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.Void> user_data;

  external ffi.Pointer<ffi.NativeFunction<VoidCallback>>
      buffer_collect_callback;

  external ffi.Pointer<ffi.Uint8> buffer;

  @ffi.Uint64()
  external int buffer_size;
}

class FlutterEngineDartObject extends ffi.Struct {
  @ffi.Int32()
  external int type;
}

abstract class FlutterNativeThreadType {
  static const int kFlutterNativeThreadTypePlatform = 0;
  static const int kFlutterNativeThreadTypeRender = 1;
  static const int kFlutterNativeThreadTypeUI = 2;
  static const int kFlutterNativeThreadTypeWorker = 3;
}

abstract class FlutterEngineAOTDataSourceType {
  static const int kFlutterEngineAOTDataSourceTypeElfPath = 0;
}

class _FlutterEngineAOTDataSource extends ffi.Struct {
  @ffi.Int32()
  external int type;
}

class FlutterEngineAOTData extends ffi.Opaque {}

class FlutterProjectArgs extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.Int8> assets_path;

  external ffi.Pointer<ffi.Int8> main_path__unused__;

  external ffi.Pointer<ffi.Int8> packages_path__unused__;

  external ffi.Pointer<ffi.Int8> icu_data_path;

  @ffi.Int32()
  external int command_line_argc;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> command_line_argv;

  external ffi.Pointer<ffi.NativeFunction<FlutterPlatformMessageCallback>>
      platform_message_callback;

  external ffi.Pointer<ffi.Uint8> vm_snapshot_data;

  @ffi.Uint64()
  external int vm_snapshot_data_size;

  external ffi.Pointer<ffi.Uint8> vm_snapshot_instructions;

  @ffi.Uint64()
  external int vm_snapshot_instructions_size;

  external ffi.Pointer<ffi.Uint8> isolate_snapshot_data;

  @ffi.Uint64()
  external int isolate_snapshot_data_size;

  external ffi.Pointer<ffi.Uint8> isolate_snapshot_instructions;

  @ffi.Uint64()
  external int isolate_snapshot_instructions_size;

  external ffi.Pointer<ffi.NativeFunction<VoidCallback>>
      root_isolate_create_callback;

  external ffi.Pointer<ffi.NativeFunction<FlutterUpdateSemanticsNodeCallback>>
      update_semantics_node_callback;

  external ffi.Pointer<
          ffi.NativeFunction<FlutterUpdateSemanticsCustomActionCallback>>
      update_semantics_custom_action_callback;

  external ffi.Pointer<ffi.Int8> persistent_cache_path;

  @ffi.Uint8()
  external int is_persistent_cache_read_only;

  external ffi.Pointer<ffi.NativeFunction<VsyncCallback>> vsync_callback;

  external ffi.Pointer<ffi.Int8> custom_dart_entrypoint;

  external ffi.Pointer<FlutterCustomTaskRunners> custom_task_runners;

  @ffi.Uint8()
  external int shutdown_dart_vm_when_done;

  external ffi.Pointer<FlutterCompositor> compositor;

  @ffi.Int64()
  external int dart_old_gen_heap_size;

  external ffi.Pointer<FlutterEngineAOTData> aot_data;

  external ffi.Pointer<
          ffi.NativeFunction<FlutterComputePlatformResolvedLocaleCallback>>
      compute_platform_resolved_locale_callback;

  @ffi.Int32()
  external int dart_entrypoint_argc;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> dart_entrypoint_argv;
}

class FlutterEngineProcTable extends ffi.Struct {
  @ffi.Uint64()
  external int struct_size;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineCreateAOTDataFnPtr>>
      CreateAOTData;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineCollectAOTDataFnPtr>>
      CollectAOTData;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineRunFnPtr>> Run;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineShutdownFnPtr>> Shutdown;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineInitializeFnPtr>>
      Initialize;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineDeinitializeFnPtr>>
      Deinitialize;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineRunInitializedFnPtr>>
      RunInitialized;

  external ffi
          .Pointer<ffi.NativeFunction<FlutterEngineSendWindowMetricsEventFnPtr>>
      SendWindowMetricsEvent;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineSendPointerEventFnPtr>>
      SendPointerEvent;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineSendKeyEventFnPtr>>
      SendKeyEvent;

  external ffi
          .Pointer<ffi.NativeFunction<FlutterEngineSendPlatformMessageFnPtr>>
      SendPlatformMessage;

  external ffi.Pointer<
          ffi.NativeFunction<
              FlutterEnginePlatformMessageCreateResponseHandleFnPtr>>
      PlatformMessageCreateResponseHandle;

  external ffi.Pointer<
          ffi.NativeFunction<
              FlutterEnginePlatformMessageReleaseResponseHandleFnPtr>>
      PlatformMessageReleaseResponseHandle;

  external ffi.Pointer<
          ffi.NativeFunction<FlutterEngineSendPlatformMessageResponseFnPtr>>
      SendPlatformMessageResponse;

  external ffi.Pointer<
          ffi.NativeFunction<FlutterEngineRegisterExternalTextureFnPtr>>
      RegisterExternalTexture;

  external ffi.Pointer<
          ffi.NativeFunction<FlutterEngineUnregisterExternalTextureFnPtr>>
      UnregisterExternalTexture;

  external ffi.Pointer<
          ffi.NativeFunction<
              FlutterEngineMarkExternalTextureFrameAvailableFnPtr>>
      MarkExternalTextureFrameAvailable;

  external ffi
          .Pointer<ffi.NativeFunction<FlutterEngineUpdateSemanticsEnabledFnPtr>>
      UpdateSemanticsEnabled;

  external ffi.Pointer<
          ffi.NativeFunction<FlutterEngineUpdateAccessibilityFeaturesFnPtr>>
      UpdateAccessibilityFeatures;

  external ffi.Pointer<
          ffi.NativeFunction<FlutterEngineDispatchSemanticsActionFnPtr>>
      DispatchSemanticsAction;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineOnVsyncFnPtr>> OnVsync;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineReloadSystemFontsFnPtr>>
      ReloadSystemFonts;

  external ffi.Pointer<
          ffi.NativeFunction<FlutterEngineTraceEventDurationBeginFnPtr>>
      TraceEventDurationBegin;

  external ffi
          .Pointer<ffi.NativeFunction<FlutterEngineTraceEventDurationEndFnPtr>>
      TraceEventDurationEnd;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineTraceEventInstantFnPtr>>
      TraceEventInstant;

  external ffi
          .Pointer<ffi.NativeFunction<FlutterEnginePostRenderThreadTaskFnPtr>>
      PostRenderThreadTask;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineGetCurrentTimeFnPtr>>
      GetCurrentTime;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineRunTaskFnPtr>> RunTask;

  external ffi.Pointer<ffi.NativeFunction<FlutterEngineUpdateLocalesFnPtr>>
      UpdateLocales;

  external ffi.Pointer<
          ffi.NativeFunction<FlutterEngineRunsAOTCompiledDartCodeFnPtr>>
      RunsAOTCompiledDartCode;

  external ffi.Pointer<ffi.NativeFunction<FlutterEnginePostDartObjectFnPtr>>
      PostDartObject;

  external ffi
          .Pointer<ffi.NativeFunction<FlutterEngineNotifyLowMemoryWarningFnPtr>>
      NotifyLowMemoryWarning;

  external ffi.Pointer<
          ffi.NativeFunction<FlutterEnginePostCallbackOnAllNativeThreadsFnPtr>>
      PostCallbackOnAllNativeThreads;

  external ffi
          .Pointer<ffi.NativeFunction<FlutterEngineNotifyDisplayUpdateFnPtr>>
      NotifyDisplayUpdate;
}

const int true_1 = 1;

const int false_1 = 0;

const int bool_true_false_are_defined = 1;

const int NULL = 0;

const int STDINT_H = 1;

const int FEATURES_H = 1;

const int DEFAULT_SOURCE = 1;

const int GLIBC_USE_ISOC2X = 1;

const int USE_ISOC11 = 1;

const int USE_ISOC99 = 1;

const int USE_ISOC95 = 1;

const int POSIX_SOURCE = 1;

const int POSIX_C_SOURCE = 200809;

const int USE_POSIX = 1;

const int USE_POSIX2 = 1;

const int USE_POSIX199309 = 1;

const int USE_POSIX199506 = 1;

const int USE_XOPEN2K = 1;

const int USE_XOPEN2K8 = 1;

const int ATFILE_SOURCE = 1;

const int USE_MISC = 1;

const int USE_ATFILE = 1;

const int USE_FORTIFY_LEVEL = 0;

const int GLIBC_USE_DEPRECATED_GETS = 0;

const int GLIBC_USE_DEPRECATED_SCANF = 0;

const int STDC_PREDEF_H = 1;

const int STDC_IEC_559__ = 1;

const int STDC_IEC_559_COMPLEX__ = 1;

const int STDC_ISO_10646__ = 201706;

const int GNU_LIBRARY__ = 6;

const int GLIBC__ = 2;

const int GLIBC_MINOR__ = 33;

const int SYS_CDEFS_H = 1;

const int THROW = 1;

const int THROWNL = 1;

const int glibc_c99_flexarr_available = 1;

const int WORDSIZE = 64;

const int WORDSIZE_TIME64_COMPAT32 = 1;

const int SYSCALL_WORDSIZE = 64;

const int LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int HAVE_GENERIC_SELECTION = 0;

const int GLIBC_USE_LIB_EXT2 = 1;

const int GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int BITS_TYPES_H = 1;

const int TIMESIZE = 64;

const int BITS_TYPESIZES_H = 1;

const int OFF_T_MATCHES_OFF64_T = 1;

const int INO_T_MATCHES_INO64_T = 1;

const int RLIM_T_MATCHES_RLIM64_T = 1;

const int STATFS_MATCHES_STATFS64 = 1;

const int KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int FD_SETSIZE = 1024;

const int BITS_TIME64_H = 1;

const int BITS_WCHAR_H = 1;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int BITS_STDINT_INTN_H = 1;

const int BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int FLUTTER_ENGINE_VERSION = 1;

typedef _c_FlutterEngineCreateAOTData = ffi.Int32 Function(
  ffi.Pointer<FlutterEngineAOTDataSource> source,
  ffi.Pointer<ffi.Pointer<FlutterEngineAOTData>> data_out,
);

typedef _dart_FlutterEngineCreateAOTData = int Function(
  ffi.Pointer<FlutterEngineAOTDataSource> source,
  ffi.Pointer<ffi.Pointer<FlutterEngineAOTData>> data_out,
);

typedef _c_FlutterEngineCollectAOTData = ffi.Int32 Function(
  ffi.Pointer<FlutterEngineAOTData> data,
);

typedef _dart_FlutterEngineCollectAOTData = int Function(
  ffi.Pointer<FlutterEngineAOTData> data,
);

typedef _c_FlutterEngineRun = ffi.Int32 Function(
  ffi.Uint64 version,
  ffi.Pointer<FlutterRendererConfig> config,
  ffi.Pointer<FlutterProjectArgs> args,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Pointer<ffi.Pointer<FlutterEngine>> engine_out,
);

typedef _dart_FlutterEngineRun = int Function(
  int version,
  ffi.Pointer<FlutterRendererConfig> config,
  ffi.Pointer<FlutterProjectArgs> args,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Pointer<ffi.Pointer<FlutterEngine>> engine_out,
);

typedef _c_FlutterEngineShutdown = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
);

typedef _dart_FlutterEngineShutdown = int Function(
  ffi.Pointer<FlutterEngine> engine,
);

typedef _c_FlutterEngineInitialize = ffi.Int32 Function(
  ffi.Uint64 version,
  ffi.Pointer<FlutterRendererConfig> config,
  ffi.Pointer<FlutterProjectArgs> args,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Pointer<ffi.Pointer<FlutterEngine>> engine_out,
);

typedef _dart_FlutterEngineInitialize = int Function(
  int version,
  ffi.Pointer<FlutterRendererConfig> config,
  ffi.Pointer<FlutterProjectArgs> args,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Pointer<ffi.Pointer<FlutterEngine>> engine_out,
);

typedef _c_FlutterEngineDeinitialize = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
);

typedef _dart_FlutterEngineDeinitialize = int Function(
  ffi.Pointer<FlutterEngine> engine,
);

typedef _c_FlutterEngineRunInitialized = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
);

typedef _dart_FlutterEngineRunInitialized = int Function(
  ffi.Pointer<FlutterEngine> engine,
);

typedef _c_FlutterEngineSendWindowMetricsEvent = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterWindowMetricsEvent> event,
);

typedef _dart_FlutterEngineSendWindowMetricsEvent = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterWindowMetricsEvent> event,
);

typedef _c_FlutterEngineSendPointerEvent = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterPointerEvent> events,
  ffi.Uint64 events_count,
);

typedef _dart_FlutterEngineSendPointerEvent = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterPointerEvent> events,
  int events_count,
);

typedef FlutterKeyEventCallback = ffi.Void Function(
  ffi.Uint8,
  ffi.Pointer<ffi.Void>,
);

typedef _c_FlutterEngineSendKeyEvent = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterKeyEvent> event,
  ffi.Pointer<ffi.NativeFunction<FlutterKeyEventCallback>> callback,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_FlutterEngineSendKeyEvent = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterKeyEvent> event,
  ffi.Pointer<ffi.NativeFunction<FlutterKeyEventCallback>> callback,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_FlutterEngineSendPlatformMessage = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterPlatformMessage> message,
);

typedef _dart_FlutterEngineSendPlatformMessage = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterPlatformMessage> message,
);

typedef FlutterDataCallback = ffi.Void Function(
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef _c_FlutterPlatformMessageCreateResponseHandle = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<ffi.NativeFunction<FlutterDataCallback>> data_callback,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Pointer<ffi.Pointer<FlutterPlatformMessageResponseHandle>> response_out,
);

typedef _dart_FlutterPlatformMessageCreateResponseHandle = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<ffi.NativeFunction<FlutterDataCallback>> data_callback,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Pointer<ffi.Pointer<FlutterPlatformMessageResponseHandle>> response_out,
);

typedef _c_FlutterPlatformMessageReleaseResponseHandle = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterPlatformMessageResponseHandle> response,
);

typedef _dart_FlutterPlatformMessageReleaseResponseHandle = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterPlatformMessageResponseHandle> response,
);

typedef _c_FlutterEngineSendPlatformMessageResponse = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterPlatformMessageResponseHandle> handle,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Uint64 data_length,
);

typedef _dart_FlutterEngineSendPlatformMessageResponse = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterPlatformMessageResponseHandle> handle,
  ffi.Pointer<ffi.Uint8> data,
  int data_length,
);

typedef _c___FlutterEngineFlushPendingTasksNow = ffi.Int32 Function();

typedef _dart___FlutterEngineFlushPendingTasksNow = int Function();

typedef _c_FlutterEngineRegisterExternalTexture = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Int64 texture_identifier,
);

typedef _dart_FlutterEngineRegisterExternalTexture = int Function(
  ffi.Pointer<FlutterEngine> engine,
  int texture_identifier,
);

typedef _c_FlutterEngineUnregisterExternalTexture = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Int64 texture_identifier,
);

typedef _dart_FlutterEngineUnregisterExternalTexture = int Function(
  ffi.Pointer<FlutterEngine> engine,
  int texture_identifier,
);

typedef _c_FlutterEngineMarkExternalTextureFrameAvailable = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Int64 texture_identifier,
);

typedef _dart_FlutterEngineMarkExternalTextureFrameAvailable = int Function(
  ffi.Pointer<FlutterEngine> engine,
  int texture_identifier,
);

typedef _c_FlutterEngineUpdateSemanticsEnabled = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Uint8 enabled,
);

typedef _dart_FlutterEngineUpdateSemanticsEnabled = int Function(
  ffi.Pointer<FlutterEngine> engine,
  int enabled,
);

typedef _c_FlutterEngineUpdateAccessibilityFeatures = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Int32 features,
);

typedef _dart_FlutterEngineUpdateAccessibilityFeatures = int Function(
  ffi.Pointer<FlutterEngine> engine,
  int features,
);

typedef _c_FlutterEngineDispatchSemanticsAction = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Uint64 id,
  ffi.Int32 action,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Uint64 data_length,
);

typedef _dart_FlutterEngineDispatchSemanticsAction = int Function(
  ffi.Pointer<FlutterEngine> engine,
  int id,
  int action,
  ffi.Pointer<ffi.Uint8> data,
  int data_length,
);

typedef _c_FlutterEngineOnVsync = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.IntPtr baton,
  ffi.Uint64 frame_start_time_nanos,
  ffi.Uint64 frame_target_time_nanos,
);

typedef _dart_FlutterEngineOnVsync = int Function(
  ffi.Pointer<FlutterEngine> engine,
  int baton,
  int frame_start_time_nanos,
  int frame_target_time_nanos,
);

typedef _c_FlutterEngineReloadSystemFonts = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
);

typedef _dart_FlutterEngineReloadSystemFonts = int Function(
  ffi.Pointer<FlutterEngine> engine,
);

typedef _c_FlutterEngineTraceEventDurationBegin = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_FlutterEngineTraceEventDurationBegin = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_FlutterEngineTraceEventDurationEnd = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_FlutterEngineTraceEventDurationEnd = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_FlutterEngineTraceEventInstant = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_FlutterEngineTraceEventInstant = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef VoidCallback = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_FlutterEnginePostRenderThreadTask = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<ffi.NativeFunction<VoidCallback>> callback,
  ffi.Pointer<ffi.Void> callback_data,
);

typedef _dart_FlutterEnginePostRenderThreadTask = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<ffi.NativeFunction<VoidCallback>> callback,
  ffi.Pointer<ffi.Void> callback_data,
);

typedef _c_FlutterEngineGetCurrentTime = ffi.Uint64 Function();

typedef _dart_FlutterEngineGetCurrentTime = int Function();

typedef _c_FlutterEngineRunTask = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterTask> task,
);

typedef _dart_FlutterEngineRunTask = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<FlutterTask> task,
);

typedef _c_FlutterEngineUpdateLocales = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<ffi.Pointer<FlutterLocale>> locales,
  ffi.Uint64 locales_count,
);

typedef _dart_FlutterEngineUpdateLocales = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<ffi.Pointer<FlutterLocale>> locales,
  int locales_count,
);

typedef _c_FlutterEngineRunsAOTCompiledDartCode = ffi.Uint8 Function();

typedef _dart_FlutterEngineRunsAOTCompiledDartCode = int Function();

typedef _c_FlutterEnginePostDartObject = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Int64 port,
  ffi.Pointer<FlutterEngineDartObject> object,
);

typedef _dart_FlutterEnginePostDartObject = int Function(
  ffi.Pointer<FlutterEngine> engine,
  int port,
  ffi.Pointer<FlutterEngineDartObject> object,
);

typedef _c_FlutterEngineNotifyLowMemoryWarning = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
);

typedef _dart_FlutterEngineNotifyLowMemoryWarning = int Function(
  ffi.Pointer<FlutterEngine> engine,
);

typedef FlutterNativeThreadCallback = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_FlutterEnginePostCallbackOnAllNativeThreads = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<ffi.NativeFunction<FlutterNativeThreadCallback>> callback,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_FlutterEnginePostCallbackOnAllNativeThreads = int Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Pointer<ffi.NativeFunction<FlutterNativeThreadCallback>> callback,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_FlutterEngineNotifyDisplayUpdate = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine> engine,
  ffi.Int32 update_type,
  ffi.Pointer<FlutterEngineDisplay> displays,
  ffi.Uint64 display_count,
);

typedef _dart_FlutterEngineNotifyDisplayUpdate = int Function(
  ffi.Pointer<FlutterEngine> engine,
  int update_type,
  ffi.Pointer<FlutterEngineDisplay> displays,
  int display_count,
);

typedef _c_FlutterEngineGetProcAddresses = ffi.Int32 Function(
  ffi.Pointer<FlutterEngineProcTable> table,
);

typedef _dart_FlutterEngineGetProcAddresses = int Function(
  ffi.Pointer<FlutterEngineProcTable> table,
);

typedef BoolCallback = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
);

typedef UIntCallback = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef TransformationCallback = FlutterTransformation Function(
  ffi.Pointer<ffi.Void>,
);

typedef ProcResolver = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef TextureFrameCallback = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Uint64,
  ffi.Uint64,
  ffi.Pointer<FlutterOpenGLTexture>,
);

typedef UIntFrameInfoCallback = ffi.Uint32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<FlutterFrameInfo>,
);

typedef BoolPresentInfoCallback = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<FlutterPresentInfo>,
);

typedef FlutterMetalTextureCallback = FlutterMetalTexture Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<FlutterFrameInfo>,
);

typedef FlutterMetalPresentCallback = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<FlutterMetalTexture>,
);

typedef SoftwareSurfacePresentCallback = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Uint64,
);

typedef FlutterTaskRunnerPostTaskCallback = ffi.Void Function(
  FlutterTask,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef FlutterBackingStoreCreateCallback = ffi.Uint8 Function(
  ffi.Pointer<FlutterBackingStoreConfig>,
  ffi.Pointer<FlutterBackingStore>,
  ffi.Pointer<ffi.Void>,
);

typedef FlutterBackingStoreCollectCallback = ffi.Uint8 Function(
  ffi.Pointer<FlutterBackingStore>,
  ffi.Pointer<ffi.Void>,
);

typedef FlutterLayersPresentCallback = ffi.Uint8 Function(
  ffi.Pointer<ffi.Pointer<FlutterLayer>>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef FlutterPlatformMessageCallback = ffi.Void Function(
  ffi.Pointer<FlutterPlatformMessage>,
  ffi.Pointer<ffi.Void>,
);

typedef FlutterUpdateSemanticsNodeCallback = ffi.Void Function(
  ffi.Pointer<FlutterSemanticsNode>,
  ffi.Pointer<ffi.Void>,
);

typedef FlutterUpdateSemanticsCustomActionCallback = ffi.Void Function(
  ffi.Pointer<FlutterSemanticsCustomAction>,
  ffi.Pointer<ffi.Void>,
);

typedef VsyncCallback = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.IntPtr,
);

typedef FlutterComputePlatformResolvedLocaleCallback
    = ffi.Pointer<FlutterLocale> Function(
  ffi.Pointer<ffi.Pointer<FlutterLocale>>,
  ffi.Uint64,
);

typedef FlutterEngineCreateAOTDataFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngineAOTDataSource>,
  ffi.Pointer<ffi.Pointer<FlutterEngineAOTData>>,
);

typedef FlutterEngineCollectAOTDataFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngineAOTData>,
);

typedef FlutterEngineRunFnPtr = ffi.Int32 Function(
  ffi.Uint64,
  ffi.Pointer<FlutterRendererConfig>,
  ffi.Pointer<FlutterProjectArgs>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Pointer<FlutterEngine>>,
);

typedef FlutterEngineShutdownFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
);

typedef FlutterEngineInitializeFnPtr = ffi.Int32 Function(
  ffi.Uint64,
  ffi.Pointer<FlutterRendererConfig>,
  ffi.Pointer<FlutterProjectArgs>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Pointer<FlutterEngine>>,
);

typedef FlutterEngineDeinitializeFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
);

typedef FlutterEngineRunInitializedFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
);

typedef FlutterEngineSendWindowMetricsEventFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<FlutterWindowMetricsEvent>,
);

typedef FlutterEngineSendPointerEventFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<FlutterPointerEvent>,
  ffi.Uint64,
);

typedef FlutterEngineSendKeyEventFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<FlutterKeyEvent>,
  ffi.Pointer<ffi.NativeFunction<FlutterKeyEventCallback>>,
  ffi.Pointer<ffi.Void>,
);

typedef FlutterEngineSendPlatformMessageFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<FlutterPlatformMessage>,
);

typedef FlutterEnginePlatformMessageCreateResponseHandleFnPtr = ffi.Int32
    Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<ffi.NativeFunction<FlutterDataCallback>>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Pointer<FlutterPlatformMessageResponseHandle>>,
);

typedef FlutterEnginePlatformMessageReleaseResponseHandleFnPtr = ffi.Int32
    Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<FlutterPlatformMessageResponseHandle>,
);

typedef FlutterEngineSendPlatformMessageResponseFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<FlutterPlatformMessageResponseHandle>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint64,
);

typedef FlutterEngineRegisterExternalTextureFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Int64,
);

typedef FlutterEngineUnregisterExternalTextureFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Int64,
);

typedef FlutterEngineMarkExternalTextureFrameAvailableFnPtr = ffi.Int32
    Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Int64,
);

typedef FlutterEngineUpdateSemanticsEnabledFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Uint8,
);

typedef FlutterEngineUpdateAccessibilityFeaturesFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Int32,
);

typedef FlutterEngineDispatchSemanticsActionFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Uint64,
  ffi.Int32,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint64,
);

typedef FlutterEngineOnVsyncFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.IntPtr,
  ffi.Uint64,
  ffi.Uint64,
);

typedef FlutterEngineReloadSystemFontsFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
);

typedef FlutterEngineTraceEventDurationBeginFnPtr = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef FlutterEngineTraceEventDurationEndFnPtr = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef FlutterEngineTraceEventInstantFnPtr = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef FlutterEnginePostRenderThreadTaskFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<ffi.NativeFunction<VoidCallback>>,
  ffi.Pointer<ffi.Void>,
);

typedef FlutterEngineGetCurrentTimeFnPtr = ffi.Uint64 Function();

typedef FlutterEngineRunTaskFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<FlutterTask>,
);

typedef FlutterEngineUpdateLocalesFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<ffi.Pointer<FlutterLocale>>,
  ffi.Uint64,
);

typedef FlutterEngineRunsAOTCompiledDartCodeFnPtr = ffi.Uint8 Function();

typedef FlutterEnginePostDartObjectFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Int64,
  ffi.Pointer<FlutterEngineDartObject>,
);

typedef FlutterEngineNotifyLowMemoryWarningFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
);

typedef FlutterEnginePostCallbackOnAllNativeThreadsFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Pointer<ffi.NativeFunction<FlutterNativeThreadCallback>>,
  ffi.Pointer<ffi.Void>,
);

typedef FlutterEngineNotifyDisplayUpdateFnPtr = ffi.Int32 Function(
  ffi.Pointer<FlutterEngine>,
  ffi.Int32,
  ffi.Pointer<FlutterEngineDisplay>,
  ffi.Uint64,
);
